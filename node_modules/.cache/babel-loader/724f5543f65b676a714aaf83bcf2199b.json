{"ast":null,"code":"var _jsxFileName = \"/home/jugaldb/Desktop/projects/IWP/src/pages/QuizStats.js\";\n\n/* Copy of Results.js */\nimport React, { useState } from \"react\";\nimport \"./ResultPage.css\";\nimport { Container, Typography, Grid } from \"@material-ui/core\";\nimport Loading from \"./Loading\";\nimport { Redirect } from \"react-router\";\nimport { Pie, Bar, Line } from \"react-chartjs-2\";\n\nfunction QuizStats(props) {\n  const [loading, setLoading] = useState(true);\n  let state = null;\n  const [marksPieData, setMarksPieData] = useState({\n    labels: [],\n    data: [],\n    colors: []\n  });\n  const [highLowGraph, setHighLowData] = useState({\n    highest: -1,\n    lowest: -1,\n    average: -1\n  });\n  const [lineGraphData, setLineData] = useState({\n    labels: [],\n    data: []\n  });\n  const [redirect, setRedirect] = useState(false);\n\n  const randomColor = () => {\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n    return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n  };\n\n  const setup = () => {\n    let obj = {};\n    let obj2 = {\n      labels: [],\n      data: []\n    };\n    let highest = -1;\n    let lowest = Infinity;\n    let sum = 0;\n    state.map(response => {\n      highest = Math.max(highest, response.marks);\n      lowest = Math.min(lowest, response.marks);\n      sum += response.marks;\n\n      if (obj[response.marks] === undefined) {\n        obj[response.marks] = 1;\n      } else {\n        obj[response.marks]++;\n      }\n\n      let time = (response.timeEnded - response.timeStarted) / (1000 * 60);\n      obj2[\"labels\"].push(response.userId.name);\n      obj2[\"data\"].push(time);\n    });\n    Object.keys(obj).map(mark => {\n      let newData = marksPieData;\n      newData[\"labels\"].push(mark);\n      newData[\"data\"].push(obj[mark]);\n      newData[\"colors\"].push(randomColor());\n      setMarksPieData(newData);\n    });\n    let average = sum / state.length;\n    let newBarData = highLowGraph;\n    newBarData[\"highest\"] = highest;\n    newBarData[\"average\"] = average;\n    newBarData[\"lowest\"] = lowest;\n    setHighLowData(newBarData);\n    setLineData(obj2);\n    setLoading(false);\n  };\n\n  useState(() => {\n    if (props.location.state === undefined) {\n      setLoading(false);\n      setRedirect(true);\n      return;\n    }\n\n    state = props.location.state.responses;\n    console.log(state);\n    setup();\n  }, []);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 10\n      }\n    });\n  } else if (redirect) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 10\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"result-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    className: \"result-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, \"Stats\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"charts-container\",\n    style: {\n      paddingBottom: '3%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pie-chart\",\n    style: {\n      marginBottom: '3%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Pie, {\n    data: {\n      datasets: [{\n        data: marksPieData[\"data\"],\n        backgroundColor: marksPieData[\"colors\"]\n      }],\n      labels: marksPieData[\"labels\"]\n    },\n    width: 300,\n    height: 300,\n    options: {\n      maintainAspectRatio: false,\n      responsive: true,\n      title: {\n        display: true,\n        text: \"Marks Obtained\",\n        fontSize: 16\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Bar, {\n    width: 300,\n    height: 300,\n    data: {\n      datasets: [{\n        data: [highLowGraph[\"highest\"], highLowGraph[\"average\"], highLowGraph[\"lowest\"]],\n        backgroundColor: [\"green\", \"yellow\", \"red\"],\n        barThickness: 70\n      }],\n      labels: [\"Highest\", \"Average\", \"Lowest\"]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      maintainAspectRatio: false,\n      title: {\n        display: true,\n        text: \"Highest/Average/Lowest\",\n        fontSize: 16\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            beginAtZero: true\n          }\n        }]\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    width: 300,\n    height: 300,\n    data: {\n      datasets: [{\n        data: lineGraphData[\"data\"],\n        backgroundColor: \"rgba(255, 0, 255, 0.3)\",\n        borderColor: \"rgb(255, 0, 255)\"\n      }],\n      labels: lineGraphData[\"labels\"]\n    },\n    options: {\n      maintainAspectRatio: false,\n      title: {\n        display: true,\n        text: \"Time taken (in minutes)\",\n        fontSize: 16\n      },\n      legend: {\n        display: false\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  })))));\n}\n\nexport default QuizStats;","map":{"version":3,"sources":["/home/jugaldb/Desktop/projects/IWP/src/pages/QuizStats.js"],"names":["React","useState","Container","Typography","Grid","Loading","Redirect","Pie","Bar","Line","QuizStats","props","loading","setLoading","state","marksPieData","setMarksPieData","labels","data","colors","highLowGraph","setHighLowData","highest","lowest","average","lineGraphData","setLineData","redirect","setRedirect","randomColor","r","Math","floor","random","g","b","setup","obj","obj2","Infinity","sum","map","response","max","marks","min","undefined","time","timeEnded","timeStarted","push","userId","name","Object","keys","mark","newData","length","newBarData","location","responses","console","log","paddingBottom","marginBottom","datasets","backgroundColor","maintainAspectRatio","responsive","title","display","text","fontSize","barThickness","legend","scales","yAxes","ticks","beginAtZero","borderColor"],"mappings":"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","sourcesContent":["/* Copy of Results.js */\r\nimport React, { useState } from \"react\";\r\nimport \"./ResultPage.css\";\r\nimport { Container, Typography, Grid } from \"@material-ui/core\";\r\nimport Loading from \"./Loading\";\r\nimport { Redirect } from \"react-router\";\r\nimport {Pie, Bar, Line} from \"react-chartjs-2\";\r\n\r\nfunction QuizStats(props) {\r\n\tconst [loading, setLoading] = useState(true);\r\n\r\n\tlet state = null;\r\n\tconst [marksPieData, setMarksPieData] = useState({labels: [], data: [], colors: []});\r\n\tconst [highLowGraph, setHighLowData] = useState({highest: -1, lowest: -1, average: -1});\r\n\tconst [lineGraphData, setLineData] = useState({labels: [], data: []});\r\n\t\r\n\tconst [redirect, setRedirect] = useState(false);\r\n\r\n\tconst randomColor = () => {\r\n\t\tlet r = Math.floor(Math.random() * 255);\r\n\t\tlet g = Math.floor(Math.random() * 255);\r\n\t\tlet b = Math.floor(Math.random() * 255);\r\n\t\treturn \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r\n\t}\r\n\r\n\tconst setup = () => {\r\n\t\tlet obj = {};\r\n\t\tlet obj2 = {labels: [], data: []};\r\n\r\n\t\tlet highest = -1;\r\n\t\tlet lowest = Infinity;\r\n\t\tlet sum = 0;\r\n\r\n\t\tstate.map((response) => {\r\n\t\t\thighest = Math.max(highest, response.marks);\r\n\t\t\tlowest = Math.min(lowest, response.marks);\r\n\t\t\tsum += response.marks;\r\n\t\t\tif(obj[response.marks] === undefined) {\r\n\t\t\t\tobj[response.marks] = 1;\r\n\t\t\t} else {\r\n\t\t\t\tobj[response.marks]++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet time = (response.timeEnded-response.timeStarted)/(1000*60);\r\n\r\n\t\t\tobj2[\"labels\"].push(response.userId.name);\r\n\t\t\tobj2[\"data\"].push(time);\r\n\t\t})\r\n\r\n\t\tObject.keys(obj).map((mark) => {\r\n\t\t\tlet newData = marksPieData;\r\n\t\t\tnewData[\"labels\"].push(mark);\r\n\t\t\tnewData[\"data\"].push(obj[mark]);\r\n\t\t\tnewData[\"colors\"].push(randomColor());\r\n\t\t\tsetMarksPieData(newData);\r\n\t\t})\r\n\r\n\t\tlet average = sum/state.length;\r\n\t\tlet newBarData = highLowGraph;\r\n\t\tnewBarData[\"highest\"] = highest;\r\n\t\tnewBarData[\"average\"] = average;\r\n\t\tnewBarData[\"lowest\"] = lowest;\r\n\t\tsetHighLowData(newBarData);\r\n\t\tsetLineData(obj2);\r\n\r\n\t\tsetLoading(false);\r\n\t}\r\n\t\r\n\tuseState(() => {\r\n\t\tif(props.location.state === undefined) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetRedirect(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tstate = props.location.state.responses;\r\n\t\tconsole.log(state);\r\n\t\tsetup();\r\n\t}, [])\r\n\r\n\tif (loading) {\r\n\t\treturn <Loading />\r\n\t} else if(redirect) {\r\n\t\treturn <Redirect to=\"/dashboard\" />\r\n\t}\r\n\treturn (\r\n\t\t<Container className=\"result-page\">\r\n\t\t\t<div className=\"result-head\">\r\n\t\t\t\t<Typography variant=\"h4\" className=\"result-title\">Stats</Typography>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"charts-container\" style={{paddingBottom: '3%'}}>\r\n\t\t\t\t<div className=\"pie-chart\" style={{marginBottom: '3%'}}>\r\n\t\t\t\t\t<Pie data={{\r\n\t\t\t\t\t\tdatasets: [{data: marksPieData[\"data\"], backgroundColor: marksPieData[\"colors\"]}], \r\n\t\t\t\t\t\tlabels: marksPieData[\"labels\"]\r\n\t\t\t\t\t}} \r\n\t\t\t\t\twidth={300} height={300} \r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\tmaintainAspectRatio: false, \r\n\t\t\t\t\t\tresponsive: true, \r\n\t\t\t\t\t\ttitle: {\r\n\t\t\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\t\t\ttext: \"Marks Obtained\",\r\n\t\t\t\t\t\t\tfontSize: 16\r\n\t\t\t\t\t\t}}}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Grid container spacing={0}>\r\n\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t<Bar width={300} height={300}\r\n\t\t\t\t\t\t\tdata={{\r\n\t\t\t\t\t\t\t\tdatasets: [{\r\n\t\t\t\t\t\t\t\t\tdata: [highLowGraph[\"highest\"], highLowGraph[\"average\"], highLowGraph[\"lowest\"]],\r\n\t\t\t\t\t\t\t\t\tbackgroundColor: [\"green\", \"yellow\", \"red\"],\r\n\t\t\t\t\t\t\t\t\tbarThickness: 70\r\n\t\t\t\t\t\t\t\t}],\r\n\t\t\t\t\t\t\t\tlabels: [\"Highest\", \"Average\", \"Lowest\"]\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\toptions={{\r\n\t\t\t\t\t\t\t\tlegend: {display: false},\r\n\t\t\t\t\t\t\t\tmaintainAspectRatio: false,\r\n\t\t\t\t\t\t\t\ttitle: {\r\n\t\t\t\t\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\t\t\t\t\ttext: \"Highest/Average/Lowest\",\r\n\t\t\t\t\t\t\t\t\tfontSize: 16\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tscales: { yAxes: [{ticks: {beginAtZero: true}}]}\r\n\t\t\t\t\t\t\t}} />\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t<Line width={300} height={300}\r\n\t\t\t\t\t\t\tdata={{\r\n\t\t\t\t\t\t\t\tdatasets: [{\r\n\t\t\t\t\t\t\t\t\tdata: lineGraphData[\"data\"],\r\n\t\t\t\t\t\t\t\t\tbackgroundColor: \"rgba(255, 0, 255, 0.3)\",\r\n\t\t\t\t\t\t\t\t\tborderColor: \"rgb(255, 0, 255)\"\r\n\t\t\t\t\t\t\t\t}],\r\n\t\t\t\t\t\t\t\tlabels: lineGraphData[\"labels\"]\r\n\t\t\t\t\t\t\t}}\r\n\r\n\t\t\t\t\t\t\toptions={{\r\n\t\t\t\t\t\t\t\tmaintainAspectRatio: false,\r\n\t\t\t\t\t\t\t\ttitle: {\r\n\t\t\t\t\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\t\t\t\t\ttext: \"Time taken (in minutes)\",\r\n\t\t\t\t\t\t\t\t\tfontSize: 16\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tlegend: {display: false}\r\n\t\t\t\t\t\t\t}} />\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</div>\r\n\t\t</Container>\r\n\t)\r\n}\r\n\r\nexport default QuizStats;"]},"metadata":{},"sourceType":"module"}