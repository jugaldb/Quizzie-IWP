{"ast":null,"code":"var _jsxFileName = \"/home/jugaldb/Desktop/projects/IWP/src/pages/ForgotPassword.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Button, Typography } from \"@material-ui/core\";\nimport TextInput from \"../components/TextInput\";\nimport EmailValidator from \"email-validator\";\nimport \"./ForgotPassword.css\";\nimport axios from \"axios\";\nimport Loading from \"./Loading\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Redirect } from \"react-router\";\nimport { useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\n\nfunction ForgotPassword(props) {\n  const [userType] = useState(props.match.params.type);\n  const [email, changeEmail] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [emailChanged, setEmailChanged] = useState(false);\n  const [password, changePassword] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [passwordChanged, setPasswordChanged] = useState(false);\n  const [confirmPassword, setConfirmedPassword] = useState(\"\");\n  const [confirmPasswordError, setConfirmedPasswordError] = useState(\"\");\n  const [reset, setReset] = useState(true);\n  const [resetCode, setResetCode] = useState(\"\");\n  const [resetCodeError, setResetCodeError] = useState(\"\");\n  const [resetCodeChanged, setResetCodeChanged] = useState(false);\n  const [tokenSent, setTokenSent] = useState(false);\n  const [invalidKey, setInvalidKey] = useState(false);\n  const [expiredKey, setExpiredKey] = useState(false);\n  const [notSent, setNotSent] = useState(false);\n  const [passwordConfirmed, setPasswordConfirmed] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [redirect, setRedirect] = useState(false);\n  const [loginRedirect, setLoginRedirect] = useState(false);\n  const {\n    executeRecaptcha\n  } = useGoogleReCaptcha();\n\n  const handleEmailChange = event => {\n    setEmailChanged(true);\n    changeEmail(event.target.value);\n  };\n\n  const handlePasswordChange = event => {\n    setPasswordChanged(true);\n    changePassword(event.target.value);\n  };\n\n  const handleConfirmPasswordChange = event => {\n    setConfirmedPassword(event.target.value);\n  };\n\n  const handleResetCodeChange = event => {\n    setResetCodeChanged(true);\n    setResetCode(event.target.value);\n  };\n\n  const keyPress = event => {\n    if (event.key === \"Enter\") {\n      if (tokenSent) {\n        handleSubmit();\n      } else {\n        handleReset();\n      }\n    }\n  };\n\n  const mailErrorText = \"Email cannot be empty!\";\n  const resetCodeErrorText = \"Enter the reset code.\";\n  const passwordErrorText = \"Password cannot be empty!\";\n  const confirmPasswordErrorText = \"Does not match the password!\";\n\n  const handleReset = async event => {\n    // event.preventDefault();\n    setEmailChanged(true);\n    let errors = false;\n\n    if (email.length === 0) {\n      setEmailError(mailErrorText);\n      errors = true;\n    } else if (!EmailValidator.validate(email)) {\n      setEmailError(\"Invalid email address!\");\n      errors = true;\n    }\n\n    if (!errors && emailError.length === 0) {\n      setLoading(true);\n      let captcha = await executeRecaptcha(\"forgot_pass\");\n      let url = null;\n\n      if (userType === \"organizer\") {\n        url = `https://quizzie-api.herokuapp.com/admin/forgot`;\n      } else if (userType === \"user\") {\n        url = `https://quizzie-api.herokuapp.com/user/forgot`;\n      }\n\n      let data = {\n        email: email,\n        captcha: captcha\n      };\n\n      try {\n        await axios.post(url, data).then(res => {\n          setTokenSent(true);\n        });\n      } catch (error) {\n        if (error.response.status === 400) {\n          setNotSent(true);\n        }\n\n        console.log(error);\n      }\n    }\n\n    setLoading(false);\n  };\n\n  const handleSubmit = async event => {\n    // event.preventDefault();\n    let errors = false;\n\n    if (confirmPassword !== password) {\n      errors = true;\n      setConfirmedPasswordError(confirmPasswordErrorText);\n    }\n\n    if (!errors) {\n      setLoading(true);\n      let url = null;\n\n      if (userType === \"organizer\") {\n        url = `https://quizzie-api.herokuapp.com/admin/resetpass`;\n      } else if (userType === \"user\") {\n        url = `https://quizzie-api.herokuapp.com/user/resetpass`;\n      }\n\n      let captcha = await executeRecaptcha(\"reset_pass\");\n      let data = {\n        resetKey: resetCode,\n        newPassword: password,\n        captcha: captcha\n      };\n      let response = null;\n\n      try {\n        await axios.post(url, data).then(res => {\n          setReset(false);\n          setPasswordConfirmed(true);\n        });\n      } catch (error) {\n        setReset(false);\n\n        if (error.response.status === 400) {\n          setInvalidKey(true);\n        } else if (error.response.status === 401) {\n          setExpiredKey(true);\n        }\n\n        console.log(error);\n      }\n\n      changePassword(\"\");\n      setConfirmedPassword(\"\");\n      setResetCode(\"\");\n      setPasswordChanged(false);\n      setResetCodeChanged(false);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (props.match.params.type !== \"user\" && props.match.params.type !== \"organizer\") {\n      setRedirect(true);\n      return;\n    }\n\n    if (email.length === 0) setEmailError(mailErrorText);else setEmailError(\"\");\n    if (password.length === 0) setPasswordError(passwordErrorText);else setPasswordError(\"\");\n    if (resetCode.length === 0) setResetCodeError(resetCodeErrorText);else setResetCodeError(\"\");\n  }, [email, password, resetCode]);\n  useEffect(() => {\n    if (passwordConfirmed) {\n      setTimeout(() => {\n        setLoginRedirect(true);\n      }, 1500);\n    }\n  }, [passwordConfirmed]);\n  if (loading) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 22\n    }\n  });else if (redirect) return /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 28\n    }\n  });else if (loginRedirect) return /*#__PURE__*/React.createElement(Redirect, {\n    to: `/login/${userType}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 33\n    }\n  });else if (!tokenSent) {\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"login-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h3\",\n      color: \"primary\",\n      className: \"login-head forgot-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 6\n      }\n    }, \"Forgot Password\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 6\n      }\n    }), notSent ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"error\",\n      color: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 7\n      }\n    }, \"We couldn't find a user with that e-mail address.\") : null, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(TextInput, {\n      error: emailChanged ? emailError.length === 0 ? false : true : false,\n      helperText: emailChanged ? emailError.length === 0 ? null : emailError : null,\n      id: \"email\",\n      label: \"Email\",\n      type: \"email\",\n      className: \"form-input\",\n      variant: \"outlined\",\n      value: email,\n      onChange: handleEmailChange,\n      onKeyPress: keyPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 7\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"login-btn\",\n      onClick: handleReset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 6\n      }\n    }, \"Send mail\")));\n  } else if (tokenSent) {\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"login-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h3\",\n      color: \"primary\",\n      className: \"login-head forgot-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 6\n      }\n    }, \"Forgot Password\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 6\n      }\n    }), reset ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 7\n      }\n    }, \"Reset code sent!\") : null, invalidKey ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"error\",\n      color: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 7\n      }\n    }, \"Invalid reset Code\") : null, expiredKey ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"error\",\n      color: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 7\n      }\n    }, \"Reset Code expired!\") : null, passwordConfirmed ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"success\",\n      color: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 7\n      }\n    }, \"Password reset successful! Redirecting...\") : null, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(TextInput, {\n      error: resetCodeChanged ? resetCodeError.length === 0 ? false : true : false,\n      helperText: resetCodeChanged ? resetCodeError.length === 0 ? null : resetCodeError : null,\n      id: \"reset-code\",\n      label: \"Reset Code\",\n      type: \"text\",\n      className: \"form-input\",\n      variant: \"outlined\",\n      value: resetCode,\n      onChange: handleResetCodeChange,\n      onKeyPress: keyPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      error: passwordChanged ? passwordError.length === 0 ? false : true : false,\n      helperText: passwordChanged ? passwordError.length === 0 ? null : passwordError : null,\n      id: \"password\",\n      label: \"New Password\",\n      type: \"password\",\n      className: \"form-input\",\n      variant: \"outlined\",\n      value: password,\n      onChange: handlePasswordChange,\n      onKeyPress: keyPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      error: confirmPasswordError.length === 0 ? false : true,\n      helperText: confirmPasswordError,\n      id: \"confirm-password\",\n      label: \"Confirm Password\",\n      type: \"password\",\n      className: \"form-input\",\n      variant: \"outlined\",\n      value: confirmPassword,\n      onChange: handleConfirmPasswordChange,\n      onKeyPress: keyPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 7\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"login-btn\",\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 6\n      }\n    }, \"Reset Password\")));\n  }\n}\n\nexport default ForgotPassword;","map":{"version":3,"sources":["/home/jugaldb/Desktop/projects/IWP/src/pages/ForgotPassword.js"],"names":["React","useState","useEffect","Container","Button","Typography","TextInput","EmailValidator","axios","Loading","Alert","Redirect","useGoogleReCaptcha","ForgotPassword","props","userType","match","params","type","email","changeEmail","emailError","setEmailError","emailChanged","setEmailChanged","password","changePassword","passwordError","setPasswordError","passwordChanged","setPasswordChanged","confirmPassword","setConfirmedPassword","confirmPasswordError","setConfirmedPasswordError","reset","setReset","resetCode","setResetCode","resetCodeError","setResetCodeError","resetCodeChanged","setResetCodeChanged","tokenSent","setTokenSent","invalidKey","setInvalidKey","expiredKey","setExpiredKey","notSent","setNotSent","passwordConfirmed","setPasswordConfirmed","loading","setLoading","redirect","setRedirect","loginRedirect","setLoginRedirect","executeRecaptcha","handleEmailChange","event","target","value","handlePasswordChange","handleConfirmPasswordChange","handleResetCodeChange","keyPress","key","handleSubmit","handleReset","mailErrorText","resetCodeErrorText","passwordErrorText","confirmPasswordErrorText","errors","length","validate","captcha","url","data","post","then","res","error","response","status","console","log","resetKey","newPassword","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Container, Button, Typography } from \"@material-ui/core\";\r\nimport TextInput from \"../components/TextInput\";\r\nimport EmailValidator from \"email-validator\";\r\nimport \"./ForgotPassword.css\";\r\nimport axios from \"axios\";\r\nimport Loading from \"./Loading\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { Redirect } from \"react-router\";\r\nimport { useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\r\n\r\nfunction ForgotPassword(props) {\r\n\tconst [userType] = useState(props.match.params.type);\r\n\r\n\tconst [email, changeEmail] = useState(\"\");\r\n\tconst [emailError, setEmailError] = useState(\"\");\r\n\tconst [emailChanged, setEmailChanged] = useState(false);\r\n\r\n\tconst [password, changePassword] = useState(\"\");\r\n\tconst [passwordError, setPasswordError] = useState(\"\");\r\n\tconst [passwordChanged, setPasswordChanged] = useState(false);\r\n\tconst [confirmPassword, setConfirmedPassword] = useState(\"\");\r\n\tconst [confirmPasswordError, setConfirmedPasswordError] = useState(\"\");\r\n\r\n\tconst [reset, setReset] = useState(true);\r\n\tconst [resetCode, setResetCode] = useState(\"\");\r\n\tconst [resetCodeError, setResetCodeError] = useState(\"\");\r\n\tconst [resetCodeChanged, setResetCodeChanged] = useState(false);\r\n\r\n\tconst [tokenSent, setTokenSent] = useState(false);\r\n\tconst [invalidKey, setInvalidKey] = useState(false);\r\n\tconst [expiredKey, setExpiredKey] = useState(false);\r\n\tconst [notSent, setNotSent] = useState(false);\r\n\tconst [passwordConfirmed, setPasswordConfirmed] = useState(false);\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [redirect, setRedirect] = useState(false);\r\n\tconst [loginRedirect, setLoginRedirect] = useState(false);\r\n\r\n\tconst { executeRecaptcha } = useGoogleReCaptcha();\r\n\r\n\tconst handleEmailChange = (event) => {\r\n\t\tsetEmailChanged(true);\r\n\t\tchangeEmail(event.target.value);\r\n\t};\r\n\r\n\tconst handlePasswordChange = (event) => {\r\n\t\tsetPasswordChanged(true);\r\n\t\tchangePassword(event.target.value);\r\n\t};\r\n\r\n\tconst handleConfirmPasswordChange = (event) => {\r\n\t\tsetConfirmedPassword(event.target.value);\r\n\t};\r\n\r\n\tconst handleResetCodeChange = (event) => {\r\n\t\tsetResetCodeChanged(true);\r\n\t\tsetResetCode(event.target.value);\r\n\t};\r\n\r\n\tconst keyPress = (event) => {\r\n\t\tif (event.key === \"Enter\") {\r\n\t\t\tif (tokenSent) {\r\n\t\t\t\thandleSubmit();\r\n\t\t\t} else {\r\n\t\t\t\thandleReset();\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst mailErrorText = \"Email cannot be empty!\";\r\n\tconst resetCodeErrorText = \"Enter the reset code.\";\r\n\tconst passwordErrorText = \"Password cannot be empty!\";\r\n\tconst confirmPasswordErrorText = \"Does not match the password!\";\r\n\r\n\tconst handleReset = async (event) => {\r\n\t\t// event.preventDefault();\r\n\r\n\t\tsetEmailChanged(true);\r\n\r\n\t\tlet errors = false;\r\n\r\n\t\tif (email.length === 0) {\r\n\t\t\tsetEmailError(mailErrorText);\r\n\t\t\terrors = true;\r\n\t\t} else if (!EmailValidator.validate(email)) {\r\n\t\t\tsetEmailError(\"Invalid email address!\");\r\n\t\t\terrors = true;\r\n\t\t}\r\n\r\n\t\tif (!errors && emailError.length === 0) {\r\n\t\t\tsetLoading(true);\r\n\t\t\tlet captcha = await executeRecaptcha(\"forgot_pass\");\r\n\r\n\t\t\tlet url = null;\r\n\t\t\tif (userType === \"organizer\") {\r\n\t\t\t\turl = `https://quizzie-api.herokuapp.com/admin/forgot`;\r\n\t\t\t} else if (userType === \"user\") {\r\n\t\t\t\turl = `https://quizzie-api.herokuapp.com/user/forgot`;\r\n\t\t\t}\r\n\r\n\t\t\tlet data = {\r\n\t\t\t\temail: email,\r\n\t\t\t\tcaptcha: captcha,\r\n\t\t\t};\r\n\r\n\t\t\ttry {\r\n\t\t\t\tawait axios.post(url, data).then((res) => {\r\n\t\t\t\t\tsetTokenSent(true);\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\tif (error.response.status === 400) {\r\n\t\t\t\t\tsetNotSent(true);\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tconst handleSubmit = async (event) => {\r\n\t\t// event.preventDefault();\r\n\r\n\t\tlet errors = false;\r\n\r\n\t\tif (confirmPassword !== password) {\r\n\t\t\terrors = true;\r\n\t\t\tsetConfirmedPasswordError(confirmPasswordErrorText);\r\n\t\t}\r\n\r\n\t\tif (!errors) {\r\n\t\t\tsetLoading(true);\r\n\t\t\tlet url = null;\r\n\r\n\t\t\tif (userType === \"organizer\") {\r\n\t\t\t\turl = `https://quizzie-api.herokuapp.com/admin/resetpass`;\r\n\t\t\t} else if (userType === \"user\") {\r\n\t\t\t\turl = `https://quizzie-api.herokuapp.com/user/resetpass`;\r\n\t\t\t}\r\n\t\t\tlet captcha = await executeRecaptcha(\"reset_pass\");\r\n\r\n\t\t\tlet data = {\r\n\t\t\t\tresetKey: resetCode,\r\n\t\t\t\tnewPassword: password,\r\n\t\t\t\tcaptcha: captcha,\r\n\t\t\t};\r\n\r\n\t\t\tlet response = null;\r\n\t\t\ttry {\r\n\t\t\t\tawait axios.post(url, data).then((res) => {\r\n\t\t\t\t\tsetReset(false);\r\n\t\t\t\t\tsetPasswordConfirmed(true);\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\tsetReset(false);\r\n\t\t\t\tif (error.response.status === 400) {\r\n\t\t\t\t\tsetInvalidKey(true);\r\n\t\t\t\t} else if (error.response.status === 401) {\r\n\t\t\t\t\tsetExpiredKey(true);\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t}\r\n\r\n\t\t\tchangePassword(\"\");\r\n\t\t\tsetConfirmedPassword(\"\");\r\n\t\t\tsetResetCode(\"\");\r\n\t\t\tsetPasswordChanged(false);\r\n\t\t\tsetResetCodeChanged(false);\r\n\t\t}\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (\r\n\t\t\tprops.match.params.type !== \"user\" &&\r\n\t\t\tprops.match.params.type !== \"organizer\"\r\n\t\t) {\r\n\t\t\tsetRedirect(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (email.length === 0) setEmailError(mailErrorText);\r\n\t\telse setEmailError(\"\");\r\n\r\n\t\tif (password.length === 0) setPasswordError(passwordErrorText);\r\n\t\telse setPasswordError(\"\");\r\n\r\n\t\tif (resetCode.length === 0) setResetCodeError(resetCodeErrorText);\r\n\t\telse setResetCodeError(\"\");\r\n\t}, [email, password, resetCode]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (passwordConfirmed) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetLoginRedirect(true);\r\n\t\t\t}, 1500);\r\n\t\t}\r\n\t}, [passwordConfirmed]);\r\n\r\n\tif (loading) return <Loading />;\r\n\telse if (redirect) return <Redirect to=\"/\" />;\r\n\telse if (loginRedirect) return <Redirect to={`/login/${userType}`} />;\r\n\telse if (!tokenSent) {\r\n\t\treturn (\r\n\t\t\t<Container className=\"login-page\">\r\n\t\t\t\t<div className=\"login-form\">\r\n\t\t\t\t\t<Typography\r\n\t\t\t\t\t\tvariant=\"h3\"\r\n\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\tclassName=\"login-head forgot-head\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tForgot Password\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t{notSent ? (\r\n\t\t\t\t\t\t<Alert severity=\"error\" color=\"warning\">\r\n\t\t\t\t\t\t\tWe couldn't find a user with that e-mail address.\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t\t<form className=\"form\">\r\n\t\t\t\t\t\t<TextInput\r\n\t\t\t\t\t\t\terror={\r\n\t\t\t\t\t\t\t\temailChanged\r\n\t\t\t\t\t\t\t\t\t? emailError.length === 0\r\n\t\t\t\t\t\t\t\t\t\t? false\r\n\t\t\t\t\t\t\t\t\t\t: true\r\n\t\t\t\t\t\t\t\t\t: false\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\thelperText={\r\n\t\t\t\t\t\t\t\temailChanged\r\n\t\t\t\t\t\t\t\t\t? emailError.length === 0\r\n\t\t\t\t\t\t\t\t\t\t? null\r\n\t\t\t\t\t\t\t\t\t\t: emailError\r\n\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tid=\"email\"\r\n\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\tclassName=\"form-input\"\r\n\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\tvalue={email}\r\n\t\t\t\t\t\t\tonChange={handleEmailChange}\r\n\t\t\t\t\t\t\tonKeyPress={keyPress}\r\n\t\t\t\t\t\t></TextInput>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t\t<Button className=\"login-btn\" onClick={handleReset}>\r\n\t\t\t\t\t\tSend mail\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</Container>\r\n\t\t);\r\n\t} else if (tokenSent) {\r\n\t\treturn (\r\n\t\t\t<Container className=\"login-page\">\r\n\t\t\t\t<div className=\"login-form\">\r\n\t\t\t\t\t<Typography\r\n\t\t\t\t\t\tvariant=\"h3\"\r\n\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\tclassName=\"login-head forgot-head\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tForgot Password\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t{reset ? (\r\n\t\t\t\t\t\t<Alert severity=\"info\">Reset code sent!</Alert>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t\t{invalidKey ? (\r\n\t\t\t\t\t\t<Alert severity=\"error\" color=\"warning\">\r\n\t\t\t\t\t\t\tInvalid reset Code\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t\t{expiredKey ? (\r\n\t\t\t\t\t\t<Alert severity=\"error\" color=\"warning\">\r\n\t\t\t\t\t\t\tReset Code expired!\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t\t{passwordConfirmed ? (\r\n\t\t\t\t\t\t<Alert severity=\"success\" color=\"warning\">\r\n\t\t\t\t\t\t\tPassword reset successful! Redirecting...\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t\t<form className=\"form\">\r\n\t\t\t\t\t\t<TextInput\r\n\t\t\t\t\t\t\terror={\r\n\t\t\t\t\t\t\t\tresetCodeChanged\r\n\t\t\t\t\t\t\t\t\t? resetCodeError.length === 0\r\n\t\t\t\t\t\t\t\t\t\t? false\r\n\t\t\t\t\t\t\t\t\t\t: true\r\n\t\t\t\t\t\t\t\t\t: false\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\thelperText={\r\n\t\t\t\t\t\t\t\tresetCodeChanged\r\n\t\t\t\t\t\t\t\t\t? resetCodeError.length === 0\r\n\t\t\t\t\t\t\t\t\t\t? null\r\n\t\t\t\t\t\t\t\t\t\t: resetCodeError\r\n\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tid=\"reset-code\"\r\n\t\t\t\t\t\t\tlabel=\"Reset Code\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tclassName=\"form-input\"\r\n\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\tvalue={resetCode}\r\n\t\t\t\t\t\t\tonChange={handleResetCodeChange}\r\n\t\t\t\t\t\t\tonKeyPress={keyPress}\r\n\t\t\t\t\t\t></TextInput>\r\n\t\t\t\t\t\t<TextInput\r\n\t\t\t\t\t\t\terror={\r\n\t\t\t\t\t\t\t\tpasswordChanged\r\n\t\t\t\t\t\t\t\t\t? passwordError.length === 0\r\n\t\t\t\t\t\t\t\t\t\t? false\r\n\t\t\t\t\t\t\t\t\t\t: true\r\n\t\t\t\t\t\t\t\t\t: false\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\thelperText={\r\n\t\t\t\t\t\t\t\tpasswordChanged\r\n\t\t\t\t\t\t\t\t\t? passwordError.length === 0\r\n\t\t\t\t\t\t\t\t\t\t? null\r\n\t\t\t\t\t\t\t\t\t\t: passwordError\r\n\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tid=\"password\"\r\n\t\t\t\t\t\t\tlabel=\"New Password\"\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tclassName=\"form-input\"\r\n\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\tvalue={password}\r\n\t\t\t\t\t\t\tonChange={handlePasswordChange}\r\n\t\t\t\t\t\t\tonKeyPress={keyPress}\r\n\t\t\t\t\t\t></TextInput>\r\n\t\t\t\t\t\t<TextInput\r\n\t\t\t\t\t\t\terror={\r\n\t\t\t\t\t\t\t\tconfirmPasswordError.length === 0 ? false : true\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\thelperText={confirmPasswordError}\r\n\t\t\t\t\t\t\tid=\"confirm-password\"\r\n\t\t\t\t\t\t\tlabel=\"Confirm Password\"\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tclassName=\"form-input\"\r\n\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\tvalue={confirmPassword}\r\n\t\t\t\t\t\t\tonChange={handleConfirmPasswordChange}\r\n\t\t\t\t\t\t\tonKeyPress={keyPress}\r\n\t\t\t\t\t\t></TextInput>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t\t<Button className=\"login-btn\" onClick={handleSubmit}>\r\n\t\t\t\t\t\tReset Password\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</Container>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ForgotPassword;\r\n"]},"metadata":{},"sourceType":"module"}