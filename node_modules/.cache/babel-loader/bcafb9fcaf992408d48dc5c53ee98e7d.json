{"ast":null,"code":"var _jsxFileName = \"/home/jugaldb/Desktop/projects/IWP/src/pages/UpdatePassword.js\";\n// Copy of UpdateProfile.js\nimport React, { useState, useEffect } from \"react\";\nimport \"./LoginPage.css\";\nimport { Container, Typography, Button } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { Redirect } from \"react-router-dom\";\nimport TextInput from \"../components/TextInput\";\nimport axios from \"axios\";\nimport Loading from \"./Loading\";\nimport { useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\n\nfunction UpdateProfile(props) {\n  const [oldPass, setOldPass] = useState(\"\");\n  const [oldPassError, setOldPassError] = useState(false);\n  const [newPass, setNewPass] = useState(\"\");\n  const [newPassError, setNewPassError] = useState(false);\n  const [confirmPass, setConfirmPass] = useState(\"\");\n  const [confirmPassError, setConfirmPassError] = useState(false);\n  const [confirmPassErrorText, setConfirmPassErrorText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [type, setType] = useState(props.match.params.type);\n  const [redirect, setRedirect] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorText, setErrorText] = useState(\"There was some problem! Please try again...\");\n  const {\n    executeRecaptcha\n  } = useGoogleReCaptcha();\n\n  const handleOldPassChange = event => {\n    setOldPass(event.target.value);\n  };\n\n  const handleNewPassChange = event => {\n    setNewPass(event.target.value);\n  };\n\n  const handleConfirmPassChange = event => {\n    setConfirmPass(event.target.value);\n  };\n\n  const keyPress = event => {\n    if (event.key === \"Enter\") {\n      handleSubmit();\n    }\n  };\n\n  const validate = () => {\n    let errors = false;\n\n    if (oldPass.trim().length === 0) {\n      setOldPassError(true);\n      errors = true;\n    } else setOldPassError(false);\n\n    if (newPass.trim().length === 0) {\n      setNewPassError(true);\n      errors = true;\n    } else setNewPassError(false);\n\n    if (confirmPass.trim().length === 0) {\n      setConfirmPassError(true);\n      setConfirmPassErrorText(\"This cannot be empty\");\n      errors = true;\n    } else if (confirmPass !== newPass) {\n      setConfirmPassErrorText(\"Does not match password\");\n      setConfirmPassError(true);\n      errors = true;\n    } else setConfirmPassError(false);\n\n    return !errors;\n  };\n\n  const handleSubmit = async () => {\n    let token = localStorage.getItem(\"authToken\");\n    let url = `https://quizzie-api.herokuapp.com/${type}/changePassword`;\n\n    if (token === null) {\n      setRedirect(true);\n      return;\n    }\n\n    if (!validate()) return;\n    setLoading(true);\n    let captcha = await executeRecaptcha(\"update_password\");\n    let data = {\n      password: oldPass,\n      newPassword: newPass,\n      captcha: captcha\n    };\n\n    try {\n      await axios.patch(url, data, {\n        headers: {\n          \"auth-token\": token\n        }\n      }).then(res => {\n        setRedirect(true);\n      });\n    } catch (error) {\n      console.log(error);\n\n      if (error.response.status === 401) {\n        setErrorText(\"Old password is wrong!\");\n      } else {\n        setErrorText(\"There was some problem! Please try again...\");\n      }\n\n      setError(true);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    let token = localStorage.getItem(\"authToken\");\n\n    if (token === null) {\n      setRedirect(true);\n      return;\n    }\n  }, []);\n\n  if (redirect) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 10\n      }\n    });\n  }\n\n  return loading ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 3\n    }\n  }) : /*#__PURE__*/React.createElement(Container, {\n    className: \"login-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    color: \"primary\",\n    className: \"login-head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, \"Update Profile\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }), error === true ? /*#__PURE__*/React.createElement(Alert, {\n    severity: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 6\n    }\n  }, errorText) : null, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    error: oldPassError,\n    helperText: oldPassError ? \"This cannot be empty\" : null,\n    id: \"old-pass\",\n    label: \"Old Password\",\n    type: \"password\",\n    className: \"form-input\",\n    variant: \"outlined\",\n    value: oldPass,\n    onChange: handleOldPassChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(TextInput, {\n    error: newPassError,\n    helperText: newPassError ? \"This cannot be empty\" : null,\n    id: \"new-pass\",\n    label: \"New Password\",\n    type: \"password\",\n    className: \"form-input\",\n    variant: \"outlined\",\n    value: newPass,\n    onChange: handleNewPassChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(TextInput, {\n    error: confirmPassError,\n    helperText: confirmPassError ? confirmPassErrorText : null,\n    id: \"confirm-pass\",\n    type: \"password\",\n    label: \"Confirm Password\",\n    className: \"form-input\",\n    variant: \"outlined\",\n    value: confirmPass,\n    onChange: handleConfirmPassChange,\n    onKeyPress: keyPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"login-btn\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, \"Update\")));\n}\n\nexport default UpdateProfile;","map":{"version":3,"sources":["/home/jugaldb/Desktop/projects/IWP/src/pages/UpdatePassword.js"],"names":["React","useState","useEffect","Container","Typography","Button","Alert","Redirect","TextInput","axios","Loading","useGoogleReCaptcha","UpdateProfile","props","oldPass","setOldPass","oldPassError","setOldPassError","newPass","setNewPass","newPassError","setNewPassError","confirmPass","setConfirmPass","confirmPassError","setConfirmPassError","confirmPassErrorText","setConfirmPassErrorText","loading","setLoading","type","setType","match","params","redirect","setRedirect","error","setError","errorText","setErrorText","executeRecaptcha","handleOldPassChange","event","target","value","handleNewPassChange","handleConfirmPassChange","keyPress","key","handleSubmit","validate","errors","trim","length","token","localStorage","getItem","url","captcha","data","password","newPassword","patch","headers","then","res","console","log","response","status"],"mappings":"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","sourcesContent":["// Copy of UpdateProfile.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./LoginPage.css\";\r\nimport { Container, Typography, Button } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport TextInput from \"../components/TextInput\";\r\nimport axios from \"axios\";\r\nimport Loading from \"./Loading\";\r\nimport { useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\r\n\r\nfunction UpdateProfile(props) {\r\n\tconst [oldPass, setOldPass] = useState(\"\");\r\n\tconst [oldPassError, setOldPassError] = useState(false);\r\n\r\n\tconst [newPass, setNewPass] = useState(\"\");\r\n\tconst [newPassError, setNewPassError] = useState(false);\r\n\r\n\tconst [confirmPass, setConfirmPass] = useState(\"\");\r\n\tconst [confirmPassError, setConfirmPassError] = useState(false);\r\n\tconst [confirmPassErrorText, setConfirmPassErrorText] = useState(\"\");\r\n\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [type, setType] = useState(props.match.params.type);\r\n\r\n\tconst [redirect, setRedirect] = useState(false);\r\n\tconst [error, setError] = useState(false);\r\n\tconst [errorText, setErrorText] = useState(\r\n\t\t\"There was some problem! Please try again...\"\r\n\t);\r\n\r\n\tconst { executeRecaptcha } = useGoogleReCaptcha();\r\n\r\n\tconst handleOldPassChange = (event) => {\r\n\t\tsetOldPass(event.target.value);\r\n\t};\r\n\tconst handleNewPassChange = (event) => {\r\n\t\tsetNewPass(event.target.value);\r\n\t};\r\n\tconst handleConfirmPassChange = (event) => {\r\n\t\tsetConfirmPass(event.target.value);\r\n\t};\r\n\r\n\tconst keyPress = (event) => {\r\n\t\tif (event.key === \"Enter\") {\r\n\t\t\thandleSubmit();\r\n\t\t}\r\n\t};\r\n\r\n\tconst validate = () => {\r\n\t\tlet errors = false;\r\n\r\n\t\tif (oldPass.trim().length === 0) {\r\n\t\t\tsetOldPassError(true);\r\n\t\t\terrors = true;\r\n\t\t} else setOldPassError(false);\r\n\r\n\t\tif (newPass.trim().length === 0) {\r\n\t\t\tsetNewPassError(true);\r\n\t\t\terrors = true;\r\n\t\t} else setNewPassError(false);\r\n\r\n\t\tif (confirmPass.trim().length === 0) {\r\n\t\t\tsetConfirmPassError(true);\r\n\t\t\tsetConfirmPassErrorText(\"This cannot be empty\");\r\n\t\t\terrors = true;\r\n\t\t} else if (confirmPass !== newPass) {\r\n\t\t\tsetConfirmPassErrorText(\"Does not match password\");\r\n\t\t\tsetConfirmPassError(true);\r\n\t\t\terrors = true;\r\n\t\t} else setConfirmPassError(false);\r\n\r\n\t\treturn !errors;\r\n\t};\r\n\r\n\tconst handleSubmit = async () => {\r\n\t\tlet token = localStorage.getItem(\"authToken\");\r\n\t\tlet url = `https://quizzie-api.herokuapp.com/${type}/changePassword`;\r\n\r\n\t\tif (token === null) {\r\n\t\t\tsetRedirect(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!validate()) return;\r\n\r\n\t\tsetLoading(true);\r\n\t\tlet captcha = await executeRecaptcha(\"update_password\");\r\n\r\n\t\tlet data = {\r\n\t\t\tpassword: oldPass,\r\n\t\t\tnewPassword: newPass,\r\n\t\t\tcaptcha: captcha,\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tawait axios\r\n\t\t\t\t.patch(url, data, {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"auth-token\": token,\r\n\t\t\t\t\t},\r\n\t\t\t\t})\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tsetRedirect(true);\r\n\t\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t\tif (error.response.status === 401) {\r\n\t\t\t\tsetErrorText(\"Old password is wrong!\");\r\n\t\t\t} else {\r\n\t\t\t\tsetErrorText(\"There was some problem! Please try again...\");\r\n\t\t\t}\r\n\t\t\tsetError(true);\r\n\t\t\tsetLoading(false);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tlet token = localStorage.getItem(\"authToken\");\r\n\t\tif (token === null) {\r\n\t\t\tsetRedirect(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}, []);\r\n\r\n\tif (redirect) {\r\n\t\treturn <Redirect to=\"/dashboard\" />;\r\n\t}\r\n\treturn loading ? (\r\n\t\t<Loading />\r\n\t) : (\r\n\t\t<Container className=\"login-page\">\r\n\t\t\t<div className=\"login-form\">\r\n\t\t\t\t<Typography variant=\"h3\" color=\"primary\" className=\"login-head\">\r\n\t\t\t\t\tUpdate Profile\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<br />\r\n\t\t\t\t{error === true ? (\r\n\t\t\t\t\t<Alert severity=\"error\">{errorText}</Alert>\r\n\t\t\t\t) : null}\r\n\t\t\t\t<form className=\"form\">\r\n\t\t\t\t\t<TextInput\r\n\t\t\t\t\t\terror={oldPassError}\r\n\t\t\t\t\t\thelperText={\r\n\t\t\t\t\t\t\toldPassError ? \"This cannot be empty\" : null\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tid=\"old-pass\"\r\n\t\t\t\t\t\tlabel=\"Old Password\"\r\n\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\tclassName=\"form-input\"\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\tvalue={oldPass}\r\n\t\t\t\t\t\tonChange={handleOldPassChange}\r\n\t\t\t\t\t></TextInput>\r\n\t\t\t\t\t<TextInput\r\n\t\t\t\t\t\terror={newPassError}\r\n\t\t\t\t\t\thelperText={\r\n\t\t\t\t\t\t\tnewPassError ? \"This cannot be empty\" : null\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tid=\"new-pass\"\r\n\t\t\t\t\t\tlabel=\"New Password\"\r\n\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\tclassName=\"form-input\"\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\tvalue={newPass}\r\n\t\t\t\t\t\tonChange={handleNewPassChange}\r\n\t\t\t\t\t></TextInput>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<TextInput\r\n\t\t\t\t\t\terror={confirmPassError}\r\n\t\t\t\t\t\thelperText={\r\n\t\t\t\t\t\t\tconfirmPassError ? confirmPassErrorText : null\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tid=\"confirm-pass\"\r\n\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\tlabel=\"Confirm Password\"\r\n\t\t\t\t\t\tclassName=\"form-input\"\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\tvalue={confirmPass}\r\n\t\t\t\t\t\tonChange={handleConfirmPassChange}\r\n\t\t\t\t\t\tonKeyPress={keyPress}\r\n\t\t\t\t\t></TextInput>\r\n\t\t\t\t</form>\r\n\t\t\t\t<Button className=\"login-btn\" onClick={handleSubmit}>\r\n\t\t\t\t\tUpdate\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nexport default UpdateProfile;\r\n"]},"metadata":{},"sourceType":"module"}