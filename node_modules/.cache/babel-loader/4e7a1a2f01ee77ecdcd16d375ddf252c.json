{"ast":null,"code":"var _jsxFileName = \"/home/jugaldb/Desktop/projects/IWP/src/pages/CreateQuiz.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./CreateQuiz.css\";\nimport { Container, Typography, Grid, Slider, InputLabel, Select, MenuItem, Button, Snackbar } from \"@material-ui/core\";\nimport TextInput from \"../components/TextInput\";\nimport { KeyboardDatePicker, KeyboardTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router\";\nimport Loading from \"../pages/Loading\";\nimport { Alert } from \"@material-ui/lab\";\nimport { AccessAlarm, FlashAutoOutlined } from \"@material-ui/icons\";\nimport { useGoogleRecaptcha, useGoogleReCaptcha } from \"react-google-recaptcha-v3\";\n\nfunction CreateQuiz() {\n  const [quizName, setQuizName] = useState(\"\");\n  const [quizDate, setQuizDate] = useState(new Date());\n  const [duration, setDuration] = useState(5);\n  const [type, setType] = useState(\"private\");\n  const [loading, setLoading] = useState(false);\n  const [redirect, setRedirect] = useState(false);\n  const [redirectEdit, setRedirectEdit] = useState(false);\n  const [quizId, setQuizId] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [nameError, setNameError] = useState(false);\n  const {\n    executeRecaptcha\n  } = useGoogleReCaptcha();\n\n  const onQuizNameChange = event => {\n    setQuizName(event.target.value);\n  };\n\n  const handleDateChange = date => {\n    setQuizDate(date);\n  };\n\n  const handleTimeChange = (e, val) => {\n    setDuration(val);\n  };\n\n  const onTypeChange = event => {\n    setType(event.target.value);\n  };\n\n  const handleSubmit = async () => {\n    // setLoading(true);\n    setNameError(false);\n\n    if (quizName == '') {\n      setNameError(true);\n    } // let token = localStorage.getItem(\"authToken\");\n    // let url = \"https://quizzie-api.herokuapp.com/quiz/createQuiz\";\n    // let captcha = await executeRecaptcha(\"create_quiz\");\n    // let data = {\n    // \tquizName: quizName,\n    // \tscheduledFor: quizDate.getTime(),\n    // \tquizDuration: duration,\n    // \tquizType: type,\n    // \tcaptcha: captcha,\n    // };\n    // try {\n    // \tawait axios\n    // \t\t.post(url, data, {\n    // \t\t\theaders: {\n    // \t\t\t\t\"auth-token\": token,\n    // \t\t\t},\n    // \t\t})\n    // \t\t.then((res) => {\n    // \t\t\tsetQuizId(res.data.result._id);\n    // \t\t\tsetLoading(false);\n    // \t\t\tsetRedirectEdit(true);\n    // \t\t});\n    // } catch (error) {\n    // \tconsole.log(error);\n    // \tsetLoading(false);\n    // }\n\n  }; // useEffect(() => {\n  // \tlet token = localStorage.getItem(\"authToken\");\n  // \tif (token === null) {\n  // \t\tsetLoading(false);\n  // \t\tsetRedirect(true);\n  // \t\treturn;\n  // \t}\n  // }, []);\n\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 10\n      }\n    });\n  } else if (redirect) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 10\n      }\n    });\n  } else if (redirectEdit) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: `/editQuiz/${quizId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 10\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"create-quiz-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"create-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      className: \"create-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 6\n      }\n    }, \"Quiz Details\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"create-form-inputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(TextInput, {\n      variant: \"outlined\",\n      error: nameError,\n      helperText: nameError ? \"Please enter a name\" : \"\",\n      label: \"Quiz Name\",\n      value: quizName,\n      onChange: onQuizNameChange,\n      name: \"Quiz Name\",\n      className: \"form-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n      utils: DateFnsUtils,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      className: \"date-time-select\",\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n      disableToolbar: true,\n      variant: \"inline\",\n      format: \"MM/dd/yyyy\",\n      margin: \"normal\",\n      label: \"Select Quiz Date\",\n      value: quizDate,\n      onChange: handleDateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 10\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(KeyboardTimePicker, {\n      ampm: true,\n      format: \"hh:mm:ss aa\",\n      views: [\"hours\", \"minutes\", \"seconds\"],\n      margin: \"normal\",\n      label: \"Select Quiz Start Time\",\n      value: quizDate,\n      onChange: handleDateChange,\n      keyboardIcon: /*#__PURE__*/React.createElement(AccessAlarm, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 10\n      }\n    })))), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        marginTop: \"5%\",\n        marginBottom: \"5%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }, \"Quiz Time (in minutes):\"), /*#__PURE__*/React.createElement(Slider, {\n      defaultValue: 5,\n      \"aria-labelledby\": \"quiz time slider\",\n      step: 5,\n      min: 5,\n      max: 60,\n      valueLabelDisplay: \"on\",\n      marks: true,\n      className: \"time-slider\",\n      value: duration,\n      onChange: handleTimeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }\n    }, \"Select quiz type: \"), /*#__PURE__*/React.createElement(Select, {\n      value: type,\n      onChange: onTypeChange,\n      className: \"type-select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MenuItem, {\n      value: \"public\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 8\n      }\n    }, \"Public\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: \"private\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 8\n      }\n    }, \"Private\")), /*#__PURE__*/React.createElement(Button, {\n      className: \"login-btn create-btn\",\n      onClick: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }\n    }, \"Create Quiz\"), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"subtitle1\",\n      className: \"create-subtitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 7\n      }\n    }, \"NOTE: After creating the quiz, you can add questions by editing the quiz in YOUR QUIZZES section of the dashboard.\"))), /*#__PURE__*/React.createElement(Snackbar, {\n      open: error,\n      autoHideDuration: 5000,\n      onClose: () => setError(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Alert, {\n      variant: \"filled\",\n      severity: \"error\",\n      onClose: () => setError(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 6\n      }\n    }, \"There was a problem. Please try again!\")));\n  }\n}\n\nexport default CreateQuiz;","map":{"version":3,"sources":["/home/jugaldb/Desktop/projects/IWP/src/pages/CreateQuiz.js"],"names":["React","useState","useEffect","Container","Typography","Grid","Slider","InputLabel","Select","MenuItem","Button","Snackbar","TextInput","KeyboardDatePicker","KeyboardTimePicker","MuiPickersUtilsProvider","DateFnsUtils","axios","Redirect","Loading","Alert","AccessAlarm","FlashAutoOutlined","useGoogleRecaptcha","useGoogleReCaptcha","CreateQuiz","quizName","setQuizName","quizDate","setQuizDate","Date","duration","setDuration","type","setType","loading","setLoading","redirect","setRedirect","redirectEdit","setRedirectEdit","quizId","setQuizId","error","setError","nameError","setNameError","executeRecaptcha","onQuizNameChange","event","target","value","handleDateChange","date","handleTimeChange","e","val","onTypeChange","handleSubmit","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./CreateQuiz.css\";\r\nimport {\r\n\tContainer,\r\n\tTypography,\r\n\tGrid,\r\n\tSlider,\r\n\tInputLabel,\r\n\tSelect,\r\n\tMenuItem,\r\n\tButton,\r\n\tSnackbar,\r\n} from \"@material-ui/core\";\r\nimport TextInput from \"../components/TextInput\";\r\nimport {\r\n\tKeyboardDatePicker,\r\n\tKeyboardTimePicker,\r\n\tMuiPickersUtilsProvider,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router\";\r\nimport Loading from \"../pages/Loading\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { AccessAlarm, FlashAutoOutlined } from \"@material-ui/icons\";\r\nimport {\r\n\tuseGoogleRecaptcha,\r\n\tuseGoogleReCaptcha,\r\n} from \"react-google-recaptcha-v3\";\r\n\r\nfunction CreateQuiz() {\r\n\tconst [quizName, setQuizName] = useState(\"\");\r\n\tconst [quizDate, setQuizDate] = useState(new Date());\r\n\tconst [duration, setDuration] = useState(5);\r\n\tconst [type, setType] = useState(\"private\");\r\n\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [redirect, setRedirect] = useState(false);\r\n\tconst [redirectEdit, setRedirectEdit] = useState(false);\r\n\tconst [quizId, setQuizId] = useState(\"\");\r\n\r\n\tconst [error, setError] = useState(false);\r\n\tconst [nameError, setNameError] = useState(false);\r\n\r\n\tconst { executeRecaptcha } = useGoogleReCaptcha();\r\n\r\n\tconst onQuizNameChange = (event) => {\r\n\t\tsetQuizName(event.target.value);\r\n\t};\r\n\r\n\tconst handleDateChange = (date) => {\r\n\t\tsetQuizDate(date);\r\n\t};\r\n\r\n\tconst handleTimeChange = (e, val) => {\r\n\t\tsetDuration(val);\r\n\t};\r\n\r\n\tconst onTypeChange = (event) => {\r\n\t\tsetType(event.target.value);\r\n\t};\r\n\r\n\tconst handleSubmit = async () => {\r\n\t\t// setLoading(true);\r\n\t\tsetNameError(false)\r\n\r\n\t\tif(quizName == ''){\r\n\t\t\tsetNameError(true)\r\n\t\t}\r\n\t\t// let token = localStorage.getItem(\"authToken\");\r\n\t\t// let url = \"https://quizzie-api.herokuapp.com/quiz/createQuiz\";\r\n\r\n\t\t// let captcha = await executeRecaptcha(\"create_quiz\");\r\n\r\n\t\t// let data = {\r\n\t\t// \tquizName: quizName,\r\n\t\t// \tscheduledFor: quizDate.getTime(),\r\n\t\t// \tquizDuration: duration,\r\n\t\t// \tquizType: type,\r\n\t\t// \tcaptcha: captcha,\r\n\t\t// };\r\n\r\n\t\t// try {\r\n\t\t// \tawait axios\r\n\t\t// \t\t.post(url, data, {\r\n\t\t// \t\t\theaders: {\r\n\t\t// \t\t\t\t\"auth-token\": token,\r\n\t\t// \t\t\t},\r\n\t\t// \t\t})\r\n\t\t// \t\t.then((res) => {\r\n\t\t// \t\t\tsetQuizId(res.data.result._id);\r\n\t\t// \t\t\tsetLoading(false);\r\n\t\t// \t\t\tsetRedirectEdit(true);\r\n\t\t// \t\t});\r\n\t\t// } catch (error) {\r\n\t\t// \tconsole.log(error);\r\n\t\t// \tsetLoading(false);\r\n\t\t// }\r\n\t};\r\n\r\n\t// useEffect(() => {\r\n\t// \tlet token = localStorage.getItem(\"authToken\");\r\n\t// \tif (token === null) {\r\n\t// \t\tsetLoading(false);\r\n\t// \t\tsetRedirect(true);\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t// }, []);\r\n\r\n\tif (loading) {\r\n\t\treturn <Loading />;\r\n\t} else if (redirect) {\r\n\t\treturn <Redirect to=\"/dashboard\" />;\r\n\t} else if (redirectEdit) {\r\n\t\treturn <Redirect to={`/editQuiz/${quizId}`} />;\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<Container className=\"create-quiz-page\">\r\n\t\t\t\t<div className=\"create-form\">\r\n\t\t\t\t\t<Typography variant=\"h4\" className=\"create-head\">\r\n\t\t\t\t\t\tQuiz Details\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<div className=\"create-form-inputs\">\r\n\t\t\t\t\t\t<TextInput\r\n\t\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\t\terror={nameError}\r\n\t\t\t\t\t\t\thelperText={nameError?\"Please enter a name\":\"\"}\r\n\t\t\t\t\t\t\tlabel=\"Quiz Name\"\r\n\t\t\t\t\t\t\tvalue={quizName}\r\n\t\t\t\t\t\t\tonChange={onQuizNameChange}\r\n\t\t\t\t\t\t\tname=\"Quiz Name\"\r\n\t\t\t\t\t\t\tclassName=\"form-input\"\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\tclassName=\"date-time-select\"\r\n\t\t\t\t\t\t\t\tcontainer\r\n\t\t\t\t\t\t\t\tspacing={3}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t\t\t<KeyboardDatePicker\r\n\t\t\t\t\t\t\t\t\t\tdisableToolbar\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"inline\"\r\n\t\t\t\t\t\t\t\t\t\tformat=\"MM/dd/yyyy\"\r\n\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Select Quiz Date\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={quizDate}\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleDateChange}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t<Grid item xs={12} sm={6}>\r\n\t\t\t\t\t\t\t\t\t<KeyboardTimePicker\r\n\t\t\t\t\t\t\t\t\t\tampm={true}\r\n\t\t\t\t\t\t\t\t\t\tformat=\"hh:mm:ss aa\"\r\n\t\t\t\t\t\t\t\t\t\tviews={[\"hours\", \"minutes\", \"seconds\"]}\r\n\t\t\t\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Select Quiz Start Time\"\r\n\t\t\t\t\t\t\t\t\t\tvalue={quizDate}\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleDateChange}\r\n\t\t\t\t\t\t\t\t\t\tkeyboardIcon={<AccessAlarm />}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</MuiPickersUtilsProvider>\r\n\t\t\t\t\t\t<p style={{ marginTop: \"5%\", marginBottom: \"5%\" }}>\r\n\t\t\t\t\t\t\tQuiz Time (in minutes):\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<Slider\r\n\t\t\t\t\t\t\tdefaultValue={5}\r\n\t\t\t\t\t\t\taria-labelledby=\"quiz time slider\"\r\n\t\t\t\t\t\t\tstep={5}\r\n\t\t\t\t\t\t\tmin={5}\r\n\t\t\t\t\t\t\tmax={60}\r\n\t\t\t\t\t\t\tvalueLabelDisplay=\"on\"\r\n\t\t\t\t\t\t\tmarks\r\n\t\t\t\t\t\t\tclassName=\"time-slider\"\r\n\t\t\t\t\t\t\tvalue={duration}\r\n\t\t\t\t\t\t\tonChange={handleTimeChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<p>Select quiz type: </p>\r\n\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\tvalue={type}\r\n\t\t\t\t\t\t\tonChange={onTypeChange}\r\n\t\t\t\t\t\t\tclassName=\"type-select\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<MenuItem value=\"public\">Public</MenuItem>\r\n\t\t\t\t\t\t\t<MenuItem value=\"private\">Private</MenuItem>\r\n\t\t\t\t\t\t</Select>\r\n\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tclassName=\"login-btn create-btn\"\r\n\t\t\t\t\t\t\tonClick={handleSubmit}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tCreate Quiz\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\tvariant=\"subtitle1\"\r\n\t\t\t\t\t\t\tclassName=\"create-subtitle\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tNOTE: After creating the quiz, you can add questions\r\n\t\t\t\t\t\t\tby editing the quiz in YOUR QUIZZES section of the\r\n\t\t\t\t\t\t\tdashboard.\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Snackbar\r\n\t\t\t\t\topen={error}\r\n\t\t\t\t\tautoHideDuration={5000}\r\n\t\t\t\t\tonClose={() => setError(false)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Alert\r\n\t\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\t\tseverity=\"error\"\r\n\t\t\t\t\t\tonClose={() => setError(false)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tThere was a problem. Please try again!\r\n\t\t\t\t\t</Alert>\r\n\t\t\t\t</Snackbar>\r\n\t\t\t</Container>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CreateQuiz;\r\n"]},"metadata":{},"sourceType":"module"}