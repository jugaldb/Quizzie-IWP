'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _constants = require('../constants');

var _constants2 = _interopRequireDefault(_constants);

var _initial_state = require('./initial_state');

var _initial_state2 = _interopRequireDefault(_initial_state);

var _initial_state_rsf = require('./initial_state_rsf');

var _initial_state_rsf2 = _interopRequireDefault(_initial_state_rsf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultFilter = (0, _immutable.fromJS)({
  id: 0,
  display: 'Search',
  value: 'search'
});

var reducer = function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _immutable.fromJS)(_initial_state2.default);
  var action = arguments[1];

  switch (action.type) {

    /* --- TOP LEVEL ------------------------ */
    case _constants2.default.RSF_ADD_RSF:
      {
        var id = action.data.id;


        if (!id) return state;
        return state.merge(_defineProperty({}, id, _initial_state_rsf2.default));
      }

    case _constants2.default.RSF_REMOVE_RSF:
      {
        var _id = action.data.id;

        return state.delete(_id);
      }

    /* --- COMBINATION ------------------------ */
    case _constants2.default.RSF_SET_COMBINATION_FILTER:
      {
        var _action$data = action.data,
            _id2 = _action$data.id,
            index = _action$data.index;

        var currentListOption = state.getIn([_id2, 'currentListOption']);
        var filter = state.getIn([_id2, 'list', currentListOption]);
        var updatedState = state.setIn([_id2, 'combinations', index, 'filter'], filter);
        return updatedState;
      }

    case _constants2.default.RSF_SET_COMBINATION_FILTER_ON_CLICK:
      {
        var _action$data2 = action.data,
            _id3 = _action$data2.id,
            _filter = _action$data2.filter,
            _index = _action$data2.index;

        var current = state.getIn([_id3, 'currentCombination']);
        var _updatedState = state.setIn([_id3, 'combinations', current, 'filter'], _filter).setIn([_id3, 'currentListOption'], _index);
        return _updatedState;
      }

    case _constants2.default.RSF_ADD_COMBINATION_COMPLETE:
      {
        var _action$data3 = action.data,
            _id4 = _action$data3.id,
            currentSearch = _action$data3.currentSearch;

        console.log('üçåüçåüçåüçåüçåüçåüçåüçåüçåüçåüçåüçåüçåüçåüçåüçåüçåüçå');
        console.log('currentSearch:', currentSearch);
        var options = state.getIn([_id4, 'options']);
        console.log('options:', options);

        var filteredOptions = options.filter(function (option) {
          return currentSearch.has(option.get('value'));
        });

        var combos = filteredOptions.reduce(function (result, option, index, original) {
          var combo = _immutable2.default.Map().set('filter', original.get(index)).set('search', currentSearch.get(option.get('value')));
          return result.push(combo);
        }, (0, _immutable.fromJS)([]));
        console.log('combos:', combos);
        var _updatedState2 = state.setIn([_id4, 'combinations'], combos).setIn([_id4, 'combinationsReady'], true);
        return _updatedState2;
        // return state;
      }

    case _constants2.default.RSF_ADD_COMBINATION:
      {
        var _id5 = action.data.id;

        var size = state.getIn([_id5, 'combinations']).size;
        var _updatedState3 = state.setIn([_id5, 'combinations', size], (0, _immutable.fromJS)({
          isEditing: true,
          isListVisible: true
        })).setIn([_id5, 'globalIsEditing'], true);
        return _updatedState3;
      }

    case _constants2.default.RSF_DELETE_COMBINATION:
      {
        var _action$data4 = action.data,
            _id6 = _action$data4.id,
            _index2 = _action$data4.index;

        var _updatedState4 = state.deleteIn([_id6, 'combinations', _index2]);
        return _updatedState4;
      }

    case _constants2.default.RSF_SET_COMBINATION_SEARCH:
      {
        var _action$data5 = action.data,
            _id7 = _action$data5.id,
            _index3 = _action$data5.index,
            search = _action$data5.search,
            _action$data5$isReady = _action$data5.isReady,
            isReady = _action$data5$isReady === undefined ? false : _action$data5$isReady;

        var combination = state.getIn([_id7, 'combinations', _index3]);
        var _updatedState5 = state;

        if (!combination.get('filter')) {
          _updatedState5 = state.setIn([_id7, 'combinations', _index3, 'filter'], defaultFilter).setIn([_id7, 'combinations', _index3, 'search'], search).setIn([_id7, 'isReady'], isReady);
        } else {
          _updatedState5 = state.setIn([_id7, 'combinations', _index3, 'search'], search).setIn([_id7, 'isReady'], isReady);
        }

        var combinations = _updatedState5.getIn([_id7, 'combinations']);
        var combinedSearch = combinations.reduce(function (result, combo) {
          var key = combo.getIn(['filter', 'value']);
          var value = combo.get('search');
          return result.set([key], value);
        }, (0, _immutable.fromJS)({}));

        var finalState = _updatedState5.setIn([_id7, 'search'], combinedSearch).setIn([_id7, 'combinations', _index3, 'isListVisible'], false);
        return finalState;
      }

    case _constants2.default.RSF_SET_COMBINATION_LIST_VISIBILITY:
      {
        var _action$data6 = action.data,
            _id8 = _action$data6.id,
            _index4 = _action$data6.index,
            isListVisible = _action$data6.isListVisible;

        var _updatedState6 = state.setIn([_id8, 'combinations', _index4, 'isListVisible'], isListVisible);
        return _updatedState6;
      }

    case _constants2.default.RSF_SET_COMBINATION_EDITING:
      {
        var _action$data7 = action.data,
            _id9 = _action$data7.id,
            _index5 = _action$data7.index,
            isEditing = _action$data7.isEditing;

        var _updatedState7 = state.setIn([_id9, 'combinations', _index5, 'isEditing'], isEditing);
        return _updatedState7;
      }

    /* --- LIST ------------------------ */
    case _constants2.default.RSF_INITIALIZE_LIST:
      {
        var _action$data8 = action.data,
            _id10 = _action$data8.id,
            data = _action$data8.data;

        var _options = data.map(function (f) {
          return (0, _immutable.fromJS)({
            id: _uuid2.default.v4(),
            display: f.get('display'),
            value: f.get('value')
          });
        });

        return state.setIn([_id10, 'list'], data).setIn([_id10, 'options'], _options).setIn([_id10, 'currentListOption'], null).setIn([_id10, 'currentCombination'], 0);
      }

    case _constants2.default.RSF_RESET_LIST:
      {
        var _id11 = action.data.id;

        var _options2 = state.getIn([_id11, 'options']);
        var _size = state.getIn([_id11, 'combinations']).size;

        var _updatedState8 = state.setIn([_id11, 'list'], _options2).setIn([_id11, 'currentListOption'], null).setIn([_id11, 'globalIsEditing'], false).setIn([_id11, 'currentCombination'], _size).setIn([_id11, 'isReady'], true);
        return _updatedState8;
      }

    case _constants2.default.RSF_SET_LIST_VISIBILITY:
      {
        var _action$data9 = action.data,
            _id12 = _action$data9.id,
            _isListVisible = _action$data9.isListVisible;

        return state.setIn([_id12, 'isListVisible'], _isListVisible);
      }

    case _constants2.default.RSF_BROWSE_LIST_UP:
      {
        var _id13 = action.data.id;

        var _currentListOption = state.getIn([_id13, 'currentListOption']);
        var _size2 = state.getIn([_id13, 'list']).size;
        var updatedListOption = _currentListOption - 1;
        if (updatedListOption < 0) {
          updatedListOption = _size2 - 1;
        }
        return state.setIn([_id13, 'currentListOption'], updatedListOption);
      }

    case _constants2.default.RSF_BROWSE_LIST_DOWN:
      {
        var _id14 = action.data.id;

        var _currentListOption2 = state.getIn([_id14, 'currentListOption']);
        var _size3 = state.getIn([_id14, 'list']).size;
        var _updatedListOption = void 0;
        if (_currentListOption2 === null) {
          _updatedListOption = 0;
        } else {
          _updatedListOption = _currentListOption2 + 1;
        }
        if (_updatedListOption > _size3 - 1) {
          _updatedListOption = 0;
        }
        return state.setIn([_id14, 'currentListOption'], _updatedListOption);
      }

    case _constants2.default.RSF_FILTER_LIST:
      {
        var _action$data10 = action.data,
            _id15 = _action$data10.id,
            currentInput = _action$data10.currentInput;

        var _options3 = state.getIn([_id15, 'options']) || [];
        var filtered = _options3.filter(function (option) {
          return option.get('display').toLowerCase().includes(currentInput.toLowerCase());
        });

        var _updatedState9 = state.setIn([_id15, 'list'], filtered);
        return _updatedState9;
      }

    case _constants2.default.RSF_SET_LIST_BROWSING:
      {
        var _action$data11 = action.data,
            _id16 = _action$data11.id,
            isBrowsingList = _action$data11.isBrowsingList;

        return state.setIn([_id16, 'isBrowsingList'], isBrowsingList);
      }

    /* --- OVERALL ------------------------ */
    case _constants2.default.RSF_SET_SEARCH_READY:
      {
        var _action$data12 = action.data,
            _id17 = _action$data12.id,
            _isReady = _action$data12.isReady;

        var _updatedState10 = state.setIn([_id17, 'isReady'], _isReady);
        return _updatedState10;
      }

    case _constants2.default.RSF_SET_CURRENT_INPUT:
      {
        var _action$data13 = action.data,
            _id18 = _action$data13.id,
            _currentInput = _action$data13.currentInput;

        var _updatedState11 = state.setIn([_id18, 'currentInput'], _currentInput);
        return _updatedState11;
      }

    case _constants2.default.RSF_SET_CURRENT_COMBINATION:
      {
        var _action$data14 = action.data,
            _id19 = _action$data14.id,
            currentCombination = _action$data14.currentCombination;

        return state.setIn([_id19, 'currentCombination'], currentCombination);
      }

    case _constants2.default.RSF_INCREMENT_CURRENT_COMBINATION:
      {
        var _id20 = action.data.id;

        var _current = state.getIn([_id20, 'currentCombination']);
        var next = _current + 1;
        var _updatedState12 = state.setIn([_id20, 'currentCombination'], next);
        return _updatedState12;
      }

    default:
      {
        return state;
      }
  }
};

exports.default = reducer;