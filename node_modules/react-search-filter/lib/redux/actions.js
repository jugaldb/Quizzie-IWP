'use strict';

var _constants = require('../constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Add a React Search Filter
var addRSF = function addRSF(data) {
  return {
    type: _constants2.default.RSF_ADD_RSF,
    data: data
  };
};

// Save filters


var initializeList = function initializeList(data) {
  return {
    type: _constants2.default.RSF_INITIALIZE_LIST,
    data: data
  };
};

var browseListUp = function browseListUp(data) {
  return {
    type: _constants2.default.RSF_BROWSE_LIST_UP,
    data: data
  };
};

var browseListDown = function browseListDown(data) {
  return {
    type: _constants2.default.RSF_BROWSE_LIST_DOWN,
    data: data
  };
};

var setCombinationFilter = function setCombinationFilter(data) {
  return {
    type: _constants2.default.RSF_SET_COMBINATION_FILTER,
    data: data
  };
};

var setCombinationSearch = function setCombinationSearch(data) {
  return {
    type: _constants2.default.RSF_SET_COMBINATION_SEARCH,
    data: data
  };
};

var setCombinationListVisibility = function setCombinationListVisibility(data) {
  return {
    type: _constants2.default.RSF_SET_COMBINATION_LIST_VISIBILITY,
    data: data
  };
};

var setCombinationEditing = function setCombinationEditing(data) {
  return {
    type: _constants2.default.RSF_SET_COMBINATION_EDITING,
    data: data
  };
};

var setSearchReady = function setSearchReady(data) {
  return {
    type: _constants2.default.RSF_SET_SEARCH_READY,
    data: data
  };
};

var setCombinationFilterOnClick = function setCombinationFilterOnClick(data) {
  return {
    type: _constants2.default.RSF_SET_COMBINATION_FILTER_ON_CLICK,
    data: data
  };
};

var setListVisibility = function setListVisibility(data) {
  return {
    type: _constants2.default.RSF_SET_LIST_VISIBILITY,
    data: data
  };
};

var setListBrowsing = function setListBrowsing(data) {
  return {
    type: _constants2.default.RSF_SET_LIST_BROWSING,
    data: data
  };
};

var setCurrentInput = function setCurrentInput(data) {
  return {
    type: _constants2.default.RSF_SET_CURRENT_INPUT,
    data: data
  };
};

var setCurrentCombination = function setCurrentCombination(data) {
  return {
    type: _constants2.default.RSF_SET_CURRENT_COMBINATION,
    data: data
  };
};

var addCombination = function addCombination(data) {
  return {
    type: _constants2.default.RSF_ADD_COMBINATION,
    data: data
  };
};

var addCombinationComplete = function addCombinationComplete(data) {
  return {
    type: _constants2.default.RSF_ADD_COMBINATION_COMPLETE,
    data: data
  };
};

var filterList = function filterList(data) {
  return {
    type: _constants2.default.RSF_FILTER_LIST,
    data: data
  };
};

var incrementCurrentCombination = function incrementCurrentCombination(data) {
  return {
    type: _constants2.default.RSF_INCREMENT_CURRENT_COMBINATION,
    data: data
  };
};

var deleteCombination = function deleteCombination(data) {
  return {
    type: _constants2.default.RSF_DELETE_COMBINATION,
    data: data
  };
};

var resetList = function resetList(data) {
  return {
    type: _constants2.default.RSF_RESET_LIST,
    data: data
  };
};

// Remove a React Search Filter
var removeRSF = function removeRSF(data) {
  return {
    type: _constants2.default.RSF_REMOVE_RSF,
    data: data
  };
};

module.exports = {
  addRSF: addRSF,
  removeRSF: removeRSF,

  initializeList: initializeList,
  browseListUp: browseListUp,
  browseListDown: browseListDown,

  setCombinationFilter: setCombinationFilter,
  setCombinationFilterOnClick: setCombinationFilterOnClick,
  setCombinationSearch: setCombinationSearch,
  setCombinationEditing: setCombinationEditing,
  setCombinationListVisibility: setCombinationListVisibility,
  addCombination: addCombination,
  addCombinationComplete: addCombinationComplete,
  setSearchReady: setSearchReady,

  setListVisibility: setListVisibility,
  setListBrowsing: setListBrowsing,
  setCurrentInput: setCurrentInput,
  setCurrentCombination: setCurrentCombination,
  deleteCombination: deleteCombination,

  filterList: filterList,
  resetList: resetList,

  incrementCurrentCombination: incrementCurrentCombination
};