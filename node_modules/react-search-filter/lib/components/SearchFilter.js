'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchFilterComponent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _reactClickout = require('react-clickout');

var _reactClickout2 = _interopRequireDefault(_reactClickout);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _Combination = require('./Combination');

var _Combination2 = _interopRequireDefault(_Combination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SearchFilterComponent = exports.SearchFilterComponent = function (_Component) {
  _inherits(SearchFilterComponent, _Component);

  function SearchFilterComponent(props, context) {
    _classCallCheck(this, SearchFilterComponent);

    var _this = _possibleConstructorReturn(this, (SearchFilterComponent.__proto__ || Object.getPrototypeOf(SearchFilterComponent)).call(this, props, context));

    _initialiseProps.call(_this);

    var options = props.options;

    var list = options.map(function (option) {
      return (0, _immutable.fromJS)({
        id: _uuid2.default.v4(),
        display: option.get('display'),
        value: option.get('value')
      });
    });

    var combinations = _this.generateInitialCombinations();

    _this.state = {
      list: list,
      combinations: combinations
    };
    return _this;
  }

  _createClass(SearchFilterComponent, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _state = this.state,
          combinations = _state.combinations,
          list = _state.list;


      return _react2.default.createElement(
        'div',
        { className: 'rsf__wrapper' },
        _react2.default.createElement(
          'div',
          { className: 'rsf__search-container' },
          combinations && combinations.map(function (c, index) {
            return _react2.default.createElement(_Combination2.default, {
              key: c.get('id'),
              index: index,
              combination: c,
              className: 'rsf__combination-item',
              list: list,
              defaultFilter: _this2.generateDefaultFilter(),
              updateCombination: _this2.updateCombination,
              deleteCombination: _this2.deleteCombination
            });
          }),
          _react2.default.createElement('div', {
            className: 'rsf__add',
            onClick: this.addNewCombination
          })
        )
      );
    }
  }]);

  return SearchFilterComponent;
}(_react.Component);

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.generateInitialCombinations = function () {
    var _props = _this3.props,
        options = _props.options,
        currentSearch = _props.currentSearch,
        defaultOption = _props.defaultOption;

    var optionsWithDefault = options.push(defaultOption);
    var currentOptions = optionsWithDefault.filter(function (option) {
      return currentSearch.has(option.get('value'));
    });
    var combos = currentOptions.reduce(function (result, option, index, original) {
      var combo = _immutable2.default.Map().set('id', _uuid2.default.v4()).set('filter', original.get(index)).set('search', currentSearch.get(option.get('value')));
      return result.push(combo);
    }, (0, _immutable.fromJS)([]));

    // FIXME: Generate a pill for search
    return combos;
  };

  this.addNewCombination = function () {
    var combinations = _this3.state.combinations;

    var newCombo = (0, _immutable.fromJS)({
      id: _uuid2.default.v4(),
      isEditing: true,
      isListVisible: true
    });
    var updated = combinations.push(newCombo);
    _this3.setState({ combinations: updated });
  };

  this.updateCombination = function (index, combo) {
    var combinations = _this3.state.combinations;

    var updated = combinations.set(index, combo);
    _this3.setState({
      combinations: updated
    }, function () {
      var search = _this3.generateSearch(_this3.state.combinations).toJS();
      _this3.props.handleSearch(search);
    });
  };

  this.deleteCombination = function (index) {
    var combinations = _this3.state.combinations;

    var updated = combinations.delete(index);
    _this3.setState({
      combinations: updated
    }, function () {
      var search = _this3.generateSearch(_this3.state.combinations).toJS();
      _this3.props.handleSearch(search);
    });
  };

  this.generateSearch = function (combinations) {
    var search = combinations.reduce(function (result, combo) {
      var key = combo.getIn(['filter', 'value']);
      var value = combo.get('search');
      return result.set([key], value);
    }, (0, _immutable.fromJS)({}));
    return search;
  };

  this.generateDefaultFilter = function () {
    var defaultOption = _this3.props.defaultOption;

    var defaultFilter = (0, _immutable.fromJS)({
      id: _uuid2.default.v4(),
      display: defaultOption.get('display'),
      value: defaultOption.get('value')
    });
    return defaultFilter;
  };
};

var Wrapped = (0, _reactClickout2.default)(SearchFilterComponent, {
  wrapperStyle: 'rsf__clickout-wrapper'
});

exports.default = Wrapped;