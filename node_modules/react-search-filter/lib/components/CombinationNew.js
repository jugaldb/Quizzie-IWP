'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CombinationComponent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _ListOptions = require('./ListOptions');

var _ListOptions2 = _interopRequireDefault(_ListOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultFilter = (0, _immutable.fromJS)({
  id: _uuid2.default.v4(),
  display: 'Search',
  value: 'search'
});

var CombinationComponent = exports.CombinationComponent = function (_Component) {
  _inherits(CombinationComponent, _Component);

  function CombinationComponent(props, context) {
    _classCallCheck(this, CombinationComponent);

    var _this = _possibleConstructorReturn(this, (CombinationComponent.__proto__ || Object.getPrototypeOf(CombinationComponent)).call(this, props, context));

    _this.handleClickout = function () {
      _this.setState({
        isListVisible: false
      });
    };

    _this.handleInputChange = function (e) {
      var value = e.target.value;

      _this.setState({
        search: value
      });
    };

    _this.browseListDown = function () {
      var currentIndex = _this.state.listIndex;
      var list = _this.props.list;


      if (currentIndex !== null && currentIndex + 1 < list.size) {
        _this.setState({ listIndex: currentIndex + 1 });
      } else {
        _this.setState({ listIndex: 0 });
      }
    };

    _this.browseListUp = function () {
      var currentIndex = _this.state.listIndex;
      var list = _this.props.list;


      if (currentIndex !== null && currentIndex - 1 > -1) {
        _this.setState({ listIndex: currentIndex - 1 });
      } else {
        _this.setState({ listIndex: list.size - 1 });
      }
    };

    _this.handleSaveCombination = function () {
      var _this$state = _this.state,
          search = _this$state.search,
          id = _this$state.id;
      var index = _this.props.index;

      var filter = _this.state.filter || defaultFilter; // search
      var combo = _immutable2.default.Map().set('id', id).set('filter', filter).set('search', search).set('isEditing', false).set('isListVisible', false);

      _this.props.saveCombination(index, combo);
    };

    _this.handleDeleteCombination = function () {
      var index = _this.props.index;

      _this.props.deleteCombination(index);
    };

    _this.handleListItemClick = function (filter) {
      return function () {
        var _this$state2 = _this.state,
            search = _this$state2.search,
            id = _this$state2.id;
        var index = _this.props.index;

        var combo = _immutable2.default.Map().set('id', id).set('filter', filter).set('search', search).set('isEditing', false).set('isListVisible', false);
        _this.setState({
          filter: filter,
          isListVisible: false,
          listIndex: null
        }, function () {
          if (!search) {
            _this.input.focus();
          } else {
            _this.props.saveCombination(index, combo);
          }
        });
      };
    };

    _this.handleClickCombinationFilter = function () {
      _this.setState({
        isListVisible: true
      });
    };

    _this.handleClickCombinationSearch = function () {
      _this.setState({
        isEditing: true
      });
    };

    _this.handleInputKeyDown = function (e) {
      if (e.which === 40) {
        // DOWN
        _this.setState({
          isListVisible: true,
          isBrowsingList: true
        }, function () {
          return _this.browseListDown();
        });
      }
      if (e.which === 38) {
        // UP
        _this.setState({
          isListVisible: true,
          isBrowsingList: true
        }, function () {
          return _this.browseListUp();
        });
      }

      if (e.which === 13) {
        // ENTER
        if (_this.state.isBrowsingList) {
          var listIndex = _this.state.listIndex;
          var _list = _this.props.list;

          var filter = _list.get(listIndex);
          _this.setState({
            filter: filter,
            isBrowsingList: false
          });
          _this.input.focus();
        } else {
          _this.handleSaveCombination();
        }

        _this.setState({
          isListVisible: false
        });
      }

      if (e.which === 8) {// BACKSPACE

      }

      if (e.which === 27) {// ESCAPE

      }
    };

    _this.generateInputStyle = function () {
      var styles = {
        'rsf__search-input': true,
        'rsf__search-input--hidden': !_this.state.isEditing
      };
      return (0, _classnames2.default)(styles);
    };

    var combination = props.combination;

    _this.state = {
      id: _uuid2.default.v4(),
      filter: combination.get('filter'),
      search: combination.get('search'),
      isEditing: combination.get('isEditing'),

      isBrowsingList: false,
      isListVisible: combination.get('isListVisible'),
      listIndex: null
    };
    return _this;
  }

  _createClass(CombinationComponent, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var list = this.props.list;
      var _state = this.state,
          filter = _state.filter,
          search = _state.search,
          isEditing = _state.isEditing,
          isListVisible = _state.isListVisible;


      return _react2.default.createElement(
        'div',
        { className: 'rsf__combination-container' },
        filter && filter.get('display') ? _react2.default.createElement(
          'span',
          {
            className: 'rsf__combination-filter',
            onClick: this.handleClickCombinationFilter
          },
          filter.get('display') + ' :',
          _react2.default.createElement('span', {
            className: 'om-icon-descending rsf__icon-down'
          })
        ) : null,
        search && !isEditing ? _react2.default.createElement(
          'span',
          {
            className: 'rsf__combination-search',
            onClick: this.handleClickCombinationSearch
          },
          search
        ) : null,
        search && !isEditing ? _react2.default.createElement('span', {
          className: 'rsf__combination-delete',
          onClick: this.handleDeleteCombination
        }) : null,
        isEditing ? _react2.default.createElement('input', {
          ref: function ref(r) {
            _this2.input = r;
          },
          className: this.generateInputStyle(),
          type: 'text',
          onChange: this.handleInputChange,
          onKeyDown: this.handleInputKeyDown,
          onClick: this.handleInputClick,
          value: search,
          autoFocus: true
        }) : null,
        isListVisible ? _react2.default.createElement(_ListOptions2.default, {
          list: list,
          handleClickout: this.handleClickout,
          handleListItemClick: this.handleListItemClick,
          currentListOption: this.state.listIndex
        }) : null
      );
    }
  }]);

  return CombinationComponent;
}(_react.Component);

exports.default = CombinationComponent;