'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchFilterComponent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _reactRedux = require('react-redux');

var _reactClickout = require('react-clickout');

var _reactClickout2 = _interopRequireDefault(_reactClickout);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _CombinationNew = require('./CombinationNew');

var _CombinationNew2 = _interopRequireDefault(_CombinationNew);

var _actions = require('../redux/actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SearchFilterComponent = exports.SearchFilterComponent = function (_Component) {
  _inherits(SearchFilterComponent, _Component);

  function SearchFilterComponent(props, context) {
    _classCallCheck(this, SearchFilterComponent);

    var _this = _possibleConstructorReturn(this, (SearchFilterComponent.__proto__ || Object.getPrototypeOf(SearchFilterComponent)).call(this, props, context));

    _this.generateInitialCombinations = function () {
      var _this$props = _this.props,
          options = _this$props.options,
          currentSearch = _this$props.currentSearch;

      var filteredOptions = options.filter(function (option) {
        return currentSearch.has(option.get('value'));
      });
      var combos = filteredOptions.reduce(function (result, option, index, original) {
        var combo = _immutable2.default.Map().set('filter', original.get(index)).set('search', currentSearch.get(option.get('value')));
        return result.push(combo);
      }, (0, _immutable.fromJS)([]));
      return combos;
    };

    _this.handleClickout = function () {
      _this.props.setListVisibility({ id: _this.props.id, isListVisible: false });
    };

    _this.addNewCombination = function () {
      var _this$props2 = _this.props,
          id = _this$props2.id,
          globalIsEditing = _this$props2.globalIsEditing;

      if (globalIsEditing) return;

      var combinations = _this.state.combinations;

      var newCombo = (0, _immutable.fromJS)({
        id: _uuid2.default.v4(),
        isEditing: true,
        isListVisible: true
      });
      var updated = combinations.push(newCombo);
      _this.setState({ combinations: updated });
    };

    _this.saveCombination = function (index, combo) {
      var combinations = _this.state.combinations;

      var updated = combinations.set(index, combo);
      console.log('combo:', combo);
      console.log('updated:', updated);
      _this.setState({
        combinations: updated
      }, function () {
        var search = _this.generateSearch(_this.state.combinations).toJS();
        _this.props.handleSearch(search);
      });
    };

    _this.deleteCombination = function (index) {
      var combinations = _this.state.combinations;

      var updated = combinations.delete(index);
      _this.setState({
        combinations: updated
      }, function () {
        var search = _this.generateSearch(_this.state.combinations).toJS();
        _this.props.handleSearch(search);
      });
    };

    _this.generateSearch = function (combinations) {
      var search = combinations.reduce(function (result, combo) {
        var key = combo.getIn(['filter', 'value']);
        var value = combo.get('search');
        return result.set([key], value);
      }, (0, _immutable.fromJS)({}));
      return search;
    };

    _this.state = {
      creatingCombinations: false,
      combinations: (0, _immutable.fromJS)([])
    };
    return _this;
  }

  _createClass(SearchFilterComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var options = this.props.options;

      var list = options.map(function (option) {
        return (0, _immutable.fromJS)({
          id: _uuid2.default.v4(),
          display: option.get('display'),
          value: option.get('value')
        });
      });

      var combinations = this.generateInitialCombinations();

      this.state = {
        list: list,
        combinations: combinations
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps() {}
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.props.removeRSF({ id: this.props.id });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _state = this.state,
          combinations = _state.combinations,
          list = _state.list;


      return _react2.default.createElement(
        'div',
        { className: 'rsf__wrapper' },
        _react2.default.createElement(
          'div',
          { className: 'rsf__search-container' },
          combinations && combinations.map(function (c, index) {
            return _react2.default.createElement(_CombinationNew2.default, {
              key: c.get('id'),
              index: index,
              combination: c,
              className: 'rsf__combination-item',
              list: list,
              saveCombination: _this2.saveCombination,
              deleteCombination: _this2.deleteCombination
            });
          }),
          _react2.default.createElement('div', {
            className: 'rsf__add',
            onClick: this.addNewCombination
          })
        )
      );
    }
  }]);

  return SearchFilterComponent;
}(_react.Component);

var mapStateToProps = function mapStateToProps(state, ownProps) {
  return {
    globalIsEditing: state.searchFilter.getIn([ownProps.id, 'globalIsEditing']),
    combinations: state.searchFilter.getIn([ownProps.id, 'combinations']),
    // options: state.searchFilter.getIn([ownProps.id, 'options']),
    search: state.searchFilter.getIn([ownProps.id, 'search']),
    combinationsReady: state.searchFilter.getIn([ownProps.id, 'combinationsReady'])
  };
};

var mapDispatchToProps = {
  addRSF: _actions.addRSF,
  removeRSF: _actions.removeRSF,
  setListVisibility: _actions.setListVisibility,
  initializeList: _actions.initializeList,
  addCombination: _actions.addCombination,
  addCombinationComplete: _actions.addCombinationComplete
};

var Wrapped = (0, _reactClickout2.default)(SearchFilterComponent, {
  wrapperStyle: 'rsf__clickout-wrapper'
});

var connected = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Wrapped);

exports.default = connected;